(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     84401,       1890]
NotebookOptionsPosition[     78836,       1798]
NotebookOutlinePosition[     79200,       1814]
CellTagsIndexPosition[     79157,       1811]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"Quit", "[", "]"}]], "Input",
 CellChangeTimes->{{3.792056493539586*^9, 3.792056495017077*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"5c2b9ac4-3ae5-4ac0-bc75-84a12bdc7627"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.792056355671527*^9, 3.79205636843603*^9}, 
   3.792058090520795*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"1386c344-e425-45f3-adb1-986dc1a3e2c5"],

Cell[BoxData["\<\"/home/armin/my_programs/alphaLoopMisc/ltd_math_utils/\
examples\"\>"], "Output",
 CellChangeTimes->{{3.7920637265181913`*^9, 3.792063754037652*^9}, 
   3.792065984475925*^9, 3.792066078251174*^9, 3.792066441727005*^9, {
   3.792066480427114*^9, 3.7920665027660437`*^9}, 3.792067025518894*^9, 
   3.792067700188506*^9, 3.792067864166911*^9, 3.792067898833338*^9, 
   3.793450991715769*^9, 3.793451051964341*^9, 3.793519038323701*^9, {
   3.793537838404874*^9, 3.7935378653576527`*^9}, 3.793537996398704*^9, 
   3.79353813008005*^9, 3.793538254767256*^9, 3.793538293190804*^9, 
   3.793538592981193*^9, 3.793538667835072*^9, 3.793538783181093*^9, 
   3.793539757013609*^9, 3.7935398385285053`*^9, 3.793540067564519*^9, 
   3.793540101688285*^9, 3.793540998780407*^9, 3.793541429152389*^9, {
   3.793541465887992*^9, 3.7935414855338917`*^9}, 3.79354223261234*^9, 
   3.793542811535995*^9, 3.793542862886222*^9, 3.7935442814103813`*^9, 
   3.793544340217149*^9, 3.793544434128405*^9, 3.7935507846994343`*^9, 
   3.7935515858892727`*^9, 3.793551735051948*^9, {3.793553175980175*^9, 
   3.793553199798254*^9}},
 CellLabel->"Out[1]=",ExpressionUUID->"fa6e1322-1b70-4980-bad5-de1efa08c0a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<<", "../ltd_tools.m"}]], "Input",
 CellChangeTimes->{{3.792056333179846*^9, 3.792056340678121*^9}, {
  3.7920580963748713`*^9, 3.792058098228218*^9}, {3.793450976307426*^9, 
  3.7934509870674143`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"2eda4ad7-ab06-4023-b628-9918809ec85f"],

Cell[BoxData["\<\"The documented functions in this package are: \\n \
?contractLorentz \\n ?contractColor \\n Make sure you have the \
\\\"trace_form.log\\\" file for the gamma-algebra \\n \"\>"], "Print",
 CellChangeTimes->{{3.7920637266615763`*^9, 3.7920637553462887`*^9}, 
   3.792065986897901*^9, 3.7920660798453503`*^9, 3.7920664423823547`*^9, {
   3.792066480549556*^9, 3.7920665028510313`*^9}, 3.792067027887312*^9, 
   3.792067700339555*^9, 3.792067864304202*^9, 3.7920679000566483`*^9, 
   3.7934509929880323`*^9, 3.7934510532270412`*^9, 3.793519040051313*^9, {
   3.793537839706581*^9, 3.79353787345153*^9}, {3.793537996510127*^9, 
   3.793538000217005*^9}, 3.793538131342313*^9, 3.7935382548669357`*^9, 
   3.793538293292502*^9, 3.793538593069234*^9, 3.7935386679236317`*^9, 
   3.793538783261251*^9, 3.793539758289262*^9, 3.793539838614205*^9, 
   3.793540067675076*^9, 3.793540101788715*^9, 3.793540998882057*^9, 
   3.793541429250523*^9, {3.793541465991406*^9, 3.793541485633808*^9}, 
   3.7935422327023783`*^9, 3.7935428133492937`*^9, 3.793542863509303*^9, 
   3.7935442815255537`*^9, 3.7935443409099913`*^9, 3.7935444342499638`*^9, 
   3.793550784849525*^9, 3.79355158606199*^9, 3.793551735210915*^9, {
   3.79355317614004*^9, 3.793553201235695*^9}},
 CellLabel->
  "During evaluation of \
In[2]:=",ExpressionUUID->"1d3e6a74-502e-4e4d-a940-ca89fb7928fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "contractLorentz"}]], "Input",
 CellChangeTimes->{{3.793554218853558*^9, 3.7935542210564413`*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"b1ecf9d0-ad4f-498e-96fd-d1c36bbd396f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"contractLorentz[expr, optionalStatements]: \
\\n\\tcontractLorentz: Contracts Lorentz-indices and Spinor indices and \
performs Gamma-traces. It works with the following objects:\\n\\t\\tPure \
Lorentz Algebra:\\n\\t\\tvector[p, mu]: defines the Lorentz vector \
\\!\\(\\*SuperscriptBox[\\(p\\), \\(\[Mu]\\)]\\)\\n\\t\\tSP[p,k]: is the \
scalar-product \\!\\(\\*SubscriptBox[\\(p\\), \
\\(\[Mu]\\)]\\)\\!\\(\\*SuperscriptBox[\\(k\\), \
\\(\[Mu]\\)]\\)\\n\\t\\tg[mu,nu]: is the metric tensor \\!\\(\\*SubscriptBox[\
\\(g\\), \\(\[Mu], \
\[Nu]\\)]\\)\\n\\t\\t---------------------------------------------------------\
---------\\n\\t\\tDirac Algebra:\\n\\t\\tdelta[s1,s2]: Identity in spinor \
space\\n\\t\\tgamma[s1,mu,s2]: is \
\\!\\(\\*SubscriptBox[\\((\\*SuperscriptBox[\\(\[Gamma]\\), \\(\[Mu]\\)])\\), \
\\(s1, s2\\)]\\) where s1,s2 are spinor indices\\n\\t\\tgamma[s1,a,b,...,s2]: \
Gamma-chain where s1,s2 are the non-contracted spinor \
indices\\n\\t\\tgamma[s1,lVec[p],s2]: is \
pSlash\\n\\t\\tgamma[s1,mu,lVec[p],...,s2]: Gamma-chain where s1,s2 are the \
non-contracted spinor indices, slashed momenta are represented by \
lVec[momentum]\\n\\t\\t-------------------------------------------------------\
------------\\n\\t\\tSpinors:\\n\\t\\tspinorUbar[{momentum,mass,polarization},\
spinorIndex]\\n\\t\\tspinorVbar[{momentum,mass,polarization},spinorIndex]\\n\\\
t\\tspinorU[{momentum,mass,polarization},spinorIndex]\\n\\t\\tspinorV[{\
momentum,mass,polarization},spinorIndex]\\n\\tINPUT:\\n\\t\\texpr: The \
expression to be contracted\\n\\t\\tOptional Statements: (see: \
Options[contractLorentz] )\\n\\t\\t- additionalRules\[Rule]{Userdefined rules \
e.g. SP[p1,p1]->0}\\n\\t\\t- spinChainSimplify -> Boolean (default: False): \
If set to true, gamma-chains are brought into canonical (minimal) ordering, \
Dirac-equation is applied if possible\\n\\t\\t- polarizationSum   -> Boolean \
( default: False): If set to true, the polarization sum on external spinors \
is performed.\\t\\t\\n\\n\\tOUTPUT: Expression with contracted Lorentz \
indices.\\n\\tNEW CONSTANTS in Output: d for the dimension.\\n\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"contractLorentz", "[", 
                    RowBox[{"expr_", ",", 
                    RowBox[{"opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "resultContracted", ",", "vector", ",", "g", ",", "d", 
                    ",", "delta", ",", "SP", ",", "gamma", ",", "gammaTrace", 
                    ",", "spinorU", ",", "spinorUbar", ",", "spinorV", ",", 
                    "spinorVbar", ",", "spinArg", ",", "vec1", ",", "vec2", 
                    ",", "vec3", ",", "ind1", ",", "ind2", ",", "ind3", ",", 
                    "s1Ind", ",", "s2Ind", ",", "s3Ind", ",", "s1VarLength", 
                    ",", "s2VarLength", ",", "aNum", ",", "lVec", ",", 
                    "tracesFile", ",", "addRules", ",", "simplSpinChain", ",",
                     "spinSums"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"SetAttributes", "[", 
                    RowBox[{"SP", ",", "Orderless"}], "]"}], ";", 
                    RowBox[{"SetAttributes", "[", 
                    RowBox[{"g", ",", "Orderless"}], "]"}], ";", 
                    RowBox[{"SetAttributes", "[", 
                    RowBox[{"delta", ",", "Orderless"}], "]"}], ";", 
                    RowBox[{"addRules", "=", 
                    RowBox[{"OptionValue", "[", "additionalRules", "]"}]}], 
                    ";", 
                    RowBox[{"tracesFile", "=", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "traceFileLocation", "]"}], 
                    "<>", "\<\"/trace_form.log\"\>"}]}], ";", 
                    RowBox[{"simplSpinChain", "=", 
                    RowBox[{"OptionValue", "[", "spinChainSimplify", "]"}]}], 
                    ";", 
                    RowBox[{"spinSums", "=", 
                    RowBox[{"OptionValue", "[", "polarizationSum", "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FileExistsQ", "[", "tracesFile", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Return", "[", 
                    
                    RowBox[{"\<\"Error: \"\>", "<>", "tracesFile", 
                    "<>", "\<\" does not exist!\"\>"}], "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "#1", "]"}], "\[Equal]", "Rule"}], "||", 
                    RowBox[{
                    RowBox[{"Head", "[", "#1", "]"}], "\[Equal]", 
                    "RuleDelayed"}]}], "]"}], "&"}], ")"}], "/@", 
                    "addRules"}], ",", "False"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "Return", 
                    "[", "\<\"Error: additional rules contain non valid \
replacement!\"\>", "]"}], ";", 
                    RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"BooleanQ", "[", "simplSpinChain", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "Print", 
                    "[", "\<\"Warning: Option spinChainSimplify is not a of \
type Boolean.\"\>", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"BooleanQ", "[", "spinSums", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "Print", 
                    "[", "\<\"Warning: Option polarizationSum is not a of \
type Boolean.\"\>", "]"}], ";"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"vector", "[", 
                    RowBox[{
                    RowBox[{"vec1_", "+", "vec2_"}], ",", "ind1_"}], "]"}], 
                    "=", 
                    RowBox[{
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1", ",", "ind1"}], "]"}], "+", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec2", ",", "ind1"}], "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vector", "[", 
                    RowBox[{
                    RowBox[{"aNum_", " ", "vec1_"}], ",", "ind1_"}], "]"}], "/;", 
                    RowBox[{"NumericQ", "[", "aNum", "]"}]}], "=", 
                    RowBox[{"aNum", " ", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1", ",", "ind1"}], "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1_", ",", "ind1_"}], "]"}], " ", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec2_", ",", "ind1_"}], "]"}]}], "^=", 
                    RowBox[{"SP", "[", 
                    RowBox[{"vec1", ",", "vec2"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1_", ",", "ind1_"}], "]"}], "aNum_"], "/;", 
                    RowBox[{"NumericQ", "[", "aNum", "]"}]}], "^=", 
                    SuperscriptBox[
                    RowBox[{"SP", "[", 
                    RowBox[{"vec1", ",", "vec1"}], "]"}], 
                    RowBox[{"aNum", "/", "2"}]]}], ";", 
                    RowBox[{
                    RowBox[{"SP", "[", 
                    RowBox[{
                    RowBox[{"vec1_", "+", "vec2_"}], ",", "vec3_"}], "]"}], 
                    "=", 
                    RowBox[{
                    RowBox[{"SP", "[", 
                    RowBox[{"vec1", ",", "vec3"}], "]"}], "+", 
                    RowBox[{"SP", "[", 
                    RowBox[{"vec2", ",", "vec3"}], "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SP", "[", 
                    RowBox[{
                    RowBox[{"aNum_", " ", "vec1_"}], ",", "vec2_"}], "]"}], "/;", 
                    RowBox[{"NumericQ", "[", "aNum", "]"}]}], "=", 
                    RowBox[{"aNum", " ", 
                    RowBox[{"SP", "[", 
                    RowBox[{"vec1", ",", "vec2"}], "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind2_"}], "]"}], " ", 
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind3_"}], "]"}]}], "^=", 
                    RowBox[{"g", "[", 
                    RowBox[{"ind2", ",", "ind3"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind1_"}], "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"NumericQ", "[", "ind1", "]"}]}]}], "=", "d"}], 
                    ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind2_"}], "]"}], " ", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1_", ",", "ind2_"}], "]"}]}], "^=", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1", ",", "ind1"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind2_"}], "]"}], "aNum_"], "/;", 
                    RowBox[{"NumericQ", "[", "aNum", "]"}]}], "^=", 
                    SuperscriptBox["d", 
                    RowBox[{"aNum", "/", "2"}]]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"g", "[", 
                    RowBox[{"ind1_", ",", "ind2_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind__", ",", "ind1_", ",", "s2Ind__"}], 
                    "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind", ",", "ind2", ",", "s2Ind"}], "]"}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gamma", "[", 
                    RowBox[{
                    "s1VarLength__", ",", "ind1_", ",", "s2VarLength__"}], 
                    "]"}], " ", 
                    RowBox[{"vector", "[", 
                    RowBox[{"vec1_", ",", "ind1_"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength", ",", 
                    RowBox[{"lVec", "[", "vec1", "]"}], ",", "s2VarLength"}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength__", ",", "s2Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s2Ind_", ",", "s2VarLength__"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength", ",", "s2VarLength"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s3Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind_", ",", "s2VarLength__"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s3Ind", ",", "s2VarLength"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s3Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s2VarLength__", ",", "s1Ind_"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s2VarLength", ",", "s3Ind"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind_", ",", "s2VarLength__", ",", "s1Ind_"}], 
                    "]"}], "=", 
                    RowBox[{"gammaTrace", "[", "s2VarLength", "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorUbar", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind_", ",", "s1VarLength__"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{
                    RowBox[{"spinorUbar", "[", "spinArg", "]"}], ",", 
                    "s1VarLength"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorVbar", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1Ind_", ",", "s1VarLength__"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{
                    RowBox[{"spinorVbar", "[", "spinArg", "]"}], ",", 
                    "s1VarLength"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorU", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength__", ",", "s1Ind_"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength", ",", 
                    RowBox[{"spinorU", "[", "spinArg", "]"}]}], "]"}]}], ";", 
                    
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorV", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength__", ",", "s1Ind_"}], "]"}]}], "^=", 
                    RowBox[{"gamma", "[", 
                    RowBox[{"s1VarLength", ",", 
                    RowBox[{"spinorV", "[", "spinArg", "]"}]}], "]"}]}], ";", 
                    
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorUbar", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s2Ind_"}], "]"}]}], "^=", 
                    RowBox[{"spinorUbar", "[", 
                    RowBox[{"spinArg", ",", "s2Ind"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorVbar", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s2Ind_"}], "]"}]}], "^=", 
                    RowBox[{"spinorVbar", "[", 
                    RowBox[{"spinArg", ",", "s2Ind"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorU", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s2Ind_"}], "]"}]}], "^=", 
                    RowBox[{"spinorU", "[", 
                    RowBox[{"spinArg", ",", "s2Ind"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"spinorV", "[", 
                    RowBox[{"spinArg_", ",", "s1Ind_"}], "]"}], " ", 
                    RowBox[{"delta", "[", 
                    RowBox[{"s1Ind_", ",", "s2Ind_"}], "]"}]}], "^=", 
                    RowBox[{"spinorV", "[", 
                    RowBox[{"spinArg", ",", "s2Ind"}], "]"}]}], ";", 
                    RowBox[{"resultContracted", "=", 
                    RowBox[{
                    RowBox[{"Expand", "[", "expr", "]"}], "//.", 
                    "\[VeryThinSpace]", "addRules"}]}], ";", 
                    RowBox[{"resultContracted", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"performTraces", "[", 
                    RowBox[{"resultContracted", ",", "tracesFile"}], "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"resultContracted", "=", 
                    RowBox[{
                    "resultContracted", "//.", "\[VeryThinSpace]", 
                    "addRules"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"spinSums", "\[Equal]", "True"}], ",", 
                    RowBox[{
                    RowBox[{"resultContracted", "=", 
                    RowBox[{"spinorSum", "[", "resultContracted", "]"}]}], 
                    ";", 
                    RowBox[{"resultContracted", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"performTraces", "[", 
                    RowBox[{"resultContracted", ",", "tracesFile"}], "]"}], 
                    "]"}]}], ";"}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"simplSpinChain", "\[Equal]", "True"}], ",", 
                    RowBox[{
                    RowBox[{"resultContracted", "=", 
                    RowBox[{"simplifySpinChains", "[", 
                    RowBox[{"resultContracted", ",", "addRules"}], "]"}]}], 
                    ";", 
                    RowBox[{"resultContracted", "=", 
                    RowBox[{"applyDiracEQ", "[", 
                    RowBox[{"resultContracted", ",", "addRules"}], "]"}]}], 
                    ";"}]}], "]"}], ";", "resultContracted"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"additionalRules", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", "1"}], "}"}]}]},
                    {
                    RowBox[{
                    "traceFileLocation", 
                    "\[Rule]", \
"\<\"/home/armin/my_programs/alphaLoopMisc/ltd_math_utils\"\>"}]},
                    {
                    RowBox[{"spinChainSimplify", "\[Rule]", "False"}]},
                    {
                    RowBox[{"polarizationSum", "\[Rule]", "False"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","4","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"additionalRules", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", "\[Rule]", "1"}], "}"}]}], "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","4","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`contractLorentz\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"contractLorentz[expr, optionalStatements]: \
\\n\\tcontractLorentz: Contracts Lorentz-indices and Spinor indices and \
performs Gamma-traces. It works with the following objects:\\n\\t\\tPure \
Lorentz Algebra:\\n\\t\\tvector[p, mu]: defines the Lorentz vector \
\\!\\(\\*SuperscriptBox[\\(p\\), \\(\[Mu]\\)]\\)\\n\\t\\tSP[p,k]: is the \
scalar-product \\!\\(\\*SubscriptBox[\\(p\\), \
\\(\[Mu]\\)]\\)\\!\\(\\*SuperscriptBox[\\(k\\), \
\\(\[Mu]\\)]\\)\\n\\t\\tg[mu,nu]: is the metric tensor \\!\\(\\*SubscriptBox[\
\\(g\\), \\(\[Mu], \
\[Nu]\\)]\\)\\n\\t\\t---------------------------------------------------------\
---------\\n\\t\\tDirac Algebra:\\n\\t\\tdelta[s1,s2]: Identity in spinor \
space\\n\\t\\tgamma[s1,mu,s2]: is \
\\!\\(\\*SubscriptBox[\\((\\*SuperscriptBox[\\(\[Gamma]\\), \\(\[Mu]\\)])\\), \
\\(s1, s2\\)]\\) where s1,s2 are spinor indices\\n\\t\\tgamma[s1,a,b,...,s2]: \
Gamma-chain where s1,s2 are the non-contracted spinor \
indices\\n\\t\\tgamma[s1,lVec[p],s2]: is \
pSlash\\n\\t\\tgamma[s1,mu,lVec[p],...,s2]: Gamma-chain where s1,s2 are the \
non-contracted spinor indices, slashed momenta are represented by \
lVec[momentum]\\n\\t\\t-------------------------------------------------------\
------------\\n\\t\\tSpinors:\\n\\t\\tspinorUbar[{momentum,mass,polarization},\
spinorIndex]\\n\\t\\tspinorVbar[{momentum,mass,polarization},spinorIndex]\\n\\\
t\\tspinorU[{momentum,mass,polarization},spinorIndex]\\n\\t\\tspinorV[{\
momentum,mass,polarization},spinorIndex]\\n\\tINPUT:\\n\\t\\texpr: The \
expression to be contracted\\n\\t\\tOptional Statements: (see: \
Options[contractLorentz] )\\n\\t\\t- additionalRules\[Rule]{Userdefined rules \
e.g. SP[p1,p1]->0}\\n\\t\\t- spinChainSimplify -> Boolean (default: False): \
If set to true, gamma-chains are brought into canonical (minimal) ordering, \
Dirac-equation is applied if possible\\n\\t\\t- polarizationSum   -> Boolean \
( default: False): If set to true, the polarization sum on external spinors \
is performed.\\t\\t\\n\\n\\tOUTPUT: Expression with contracted Lorentz \
indices.\\n\\tNEW CONSTANTS in Output: d for the dimension.\\n\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "contractLorentz[expr, optionalStatements]: \n\tcontractLorentz: \
Contracts Lorentz-indices and Spinor indices and performs Gamma-traces. It \
works with the following objects:\n\t\tPure Lorentz Algebra:\n\t\tvector[p, \
mu]: defines the Lorentz vector \!\(\*SuperscriptBox[\(p\), \(\[Mu]\)]\)\n\t\t\
SP[p,k]: is the scalar-product \!\(\*SubscriptBox[\(p\), \
\(\[Mu]\)]\)\!\(\*SuperscriptBox[\(k\), \(\[Mu]\)]\)\n\t\tg[mu,nu]: is the \
metric tensor \!\(\*SubscriptBox[\(g\), \(\[Mu], \[Nu]\)]\)\n\t\t\
------------------------------------------------------------------\n\t\tDirac \
Algebra:\n\t\tdelta[s1,s2]: Identity in spinor space\n\t\tgamma[s1,mu,s2]: is \
\!\(\*SubscriptBox[\((\*SuperscriptBox[\(\[Gamma]\), \(\[Mu]\)])\), \(s1, \
s2\)]\) where s1,s2 are spinor indices\n\t\tgamma[s1,a,b,...,s2]: Gamma-chain \
where s1,s2 are the non-contracted spinor indices\n\t\tgamma[s1,lVec[p],s2]: \
is pSlash\n\t\tgamma[s1,mu,lVec[p],...,s2]: Gamma-chain where s1,s2 are the \
non-contracted spinor indices, slashed momenta are represented by \
lVec[momentum]\n\t\t\
-------------------------------------------------------------------\n\t\t\
Spinors:\n\t\tspinorUbar[{momentum,mass,polarization},spinorIndex]\n\t\t\
spinorVbar[{momentum,mass,polarization},spinorIndex]\n\t\t\
spinorU[{momentum,mass,polarization},spinorIndex]\n\t\t\
spinorV[{momentum,mass,polarization},spinorIndex]\n\tINPUT:\n\t\texpr: The \
expression to be contracted\n\t\tOptional Statements: (see: \
Options[contractLorentz] )\n\t\t- additionalRules\[Rule]{Userdefined rules \
e.g. SP[p1,p1]->0}\n\t\t- spinChainSimplify -> Boolean (default: False): If \
set to true, gamma-chains are brought into canonical (minimal) ordering, \
Dirac-equation is applied if possible\n\t\t- polarizationSum   -> Boolean ( \
default: False): If set to true, the polarization sum on external spinors is \
performed.\t\t\n\n\tOUTPUT: Expression with contracted Lorentz indices.\n\t\
NEW CONSTANTS in Output: d for the dimension.\n", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`contractLorentz, {$CellContext`contractLorentz[
         Pattern[$CellContext`expr, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] :> 
       Block[{$CellContext`resultContracted, $CellContext`vector, \
$CellContext`g, $CellContext`d, $CellContext`delta, $CellContext`SP, \
$CellContext`gamma, $CellContext`gammaTrace, $CellContext`spinorU, \
$CellContext`spinorUbar, $CellContext`spinorV, $CellContext`spinorVbar, \
$CellContext`spinArg, $CellContext`vec1, $CellContext`vec2, \
$CellContext`vec3, $CellContext`ind1, $CellContext`ind2, $CellContext`ind3, \
$CellContext`s1Ind, $CellContext`s2Ind, $CellContext`s3Ind, \
$CellContext`s1VarLength, $CellContext`s2VarLength, $CellContext`aNum, \
$CellContext`lVec, $CellContext`tracesFile, $CellContext`addRules, \
$CellContext`simplSpinChain, $CellContext`spinSums}, 
         SetAttributes[$CellContext`SP, Orderless]; 
         SetAttributes[$CellContext`g, Orderless]; 
         SetAttributes[$CellContext`delta, Orderless]; $CellContext`addRules = 
          OptionValue[$CellContext`additionalRules]; $CellContext`tracesFile = 
          StringJoin[
            OptionValue[$CellContext`traceFileLocation], 
            "/trace_form.log"]; $CellContext`simplSpinChain = 
          OptionValue[$CellContext`spinChainSimplify]; $CellContext`spinSums = 
          OptionValue[$CellContext`polarizationSum]; If[
           Not[
            FileExistsQ[$CellContext`tracesFile]], Return[
             StringJoin[
             "Error: ", $CellContext`tracesFile, " does not exist!"]]; 
           Abort[]]; If[
           Not[
            FreeQ[
             Map[TrueQ[
               Or[
               Head[#] == Rule, Head[#] == 
                RuleDelayed]]& , $CellContext`addRules], False]], 
           Return["Error: additional rules contain non valid replacement!"]; 
           Abort[]]; If[
           Not[
            BooleanQ[$CellContext`simplSpinChain]], 
           Print["Warning: Option spinChainSimplify is not a of type \
Boolean."]; Null]; If[
           Not[
            BooleanQ[$CellContext`spinSums]], 
           Print["Warning: Option polarizationSum is not a of type Boolean."]; 
           Null]; $CellContext`vector[Pattern[$CellContext`vec1, 
              Blank[]] + Pattern[$CellContext`vec2, 
              Blank[]], 
            Pattern[$CellContext`ind1, 
             
             Blank[]]] = $CellContext`vector[$CellContext`vec1, \
$CellContext`ind1] + $CellContext`vector[$CellContext`vec2, \
$CellContext`ind1]; Condition[
            $CellContext`vector[Pattern[$CellContext`aNum, 
               Blank[]] Pattern[$CellContext`vec1, 
               Blank[]], 
             Pattern[$CellContext`ind1, 
              Blank[]]], 
            
            NumericQ[$CellContext`aNum]] = $CellContext`aNum \
$CellContext`vector[$CellContext`vec1, $CellContext`ind1]; 
         UpSet[$CellContext`vector[
             Pattern[$CellContext`vec1, 
              Blank[]], 
             Pattern[$CellContext`ind1, 
              Blank[]]] $CellContext`vector[
             Pattern[$CellContext`vec2, 
              Blank[]], 
             Pattern[$CellContext`ind1, 
              Blank[]]], 
           $CellContext`SP[$CellContext`vec1, $CellContext`vec2]]; UpSet[
           Condition[$CellContext`vector[
              Pattern[$CellContext`vec1, 
               Blank[]], 
              Pattern[$CellContext`ind1, 
               Blank[]]]^Pattern[$CellContext`aNum, 
              Blank[]], 
            
            NumericQ[$CellContext`aNum]], $CellContext`SP[$CellContext`vec1, \
$CellContext`vec1]^($CellContext`aNum/2)]; $CellContext`SP[
           Pattern[$CellContext`vec1, 
              Blank[]] + Pattern[$CellContext`vec2, 
              Blank[]], 
            Pattern[$CellContext`vec3, 
             
             Blank[]]] = $CellContext`SP[$CellContext`vec1, \
$CellContext`vec3] + $CellContext`SP[$CellContext`vec2, $CellContext`vec3]; 
         Condition[
            $CellContext`SP[Pattern[$CellContext`aNum, 
               Blank[]] Pattern[$CellContext`vec1, 
               Blank[]], 
             Pattern[$CellContext`vec2, 
              Blank[]]], 
            
            NumericQ[$CellContext`aNum]] = $CellContext`aNum \
$CellContext`SP[$CellContext`vec1, $CellContext`vec2]; UpSet[$CellContext`g[
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`ind2, 
              Blank[]]] $CellContext`g[
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`ind3, 
              Blank[]]], 
           $CellContext`g[$CellContext`ind2, $CellContext`ind3]]; Condition[
            $CellContext`g[
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`ind1, 
              Blank[]]], 
            Not[
             NumericQ[$CellContext`ind1]]] = $CellContext`d; 
         UpSet[$CellContext`g[
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`ind2, 
              Blank[]]] $CellContext`vector[
             Pattern[$CellContext`vec1, 
              Blank[]], 
             Pattern[$CellContext`ind2, 
              Blank[]]], 
           $CellContext`vector[$CellContext`vec1, $CellContext`ind1]]; UpSet[
           Condition[$CellContext`g[
              Pattern[$CellContext`ind1, 
               Blank[]], 
              Pattern[$CellContext`ind2, 
               Blank[]]]^Pattern[$CellContext`aNum, 
              Blank[]], 
            NumericQ[$CellContext`aNum]], $CellContext`d^($CellContext`aNum/
            2)]; UpSet[$CellContext`g[
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`ind2, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1Ind, 
              BlankSequence[]], 
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`s2Ind, 
              BlankSequence[]]], 
           $CellContext`gamma[$CellContext`s1Ind, $CellContext`ind2, \
$CellContext`s2Ind]]; UpSet[$CellContext`gamma[
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]], 
             Pattern[$CellContext`ind1, 
              Blank[]], 
             Pattern[$CellContext`s2VarLength, 
              BlankSequence[]]] $CellContext`vector[
             Pattern[$CellContext`vec1, 
              Blank[]], 
             Pattern[$CellContext`ind1, 
              Blank[]]], 
           $CellContext`gamma[$CellContext`s1VarLength, 
            $CellContext`lVec[$CellContext`vec1], $CellContext`s2VarLength]]; 
         UpSet[$CellContext`gamma[
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]], 
             Pattern[$CellContext`s2Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s2Ind, 
              Blank[]], 
             Pattern[$CellContext`s2VarLength, 
              BlankSequence[]]], 
           $CellContext`gamma[$CellContext`s1VarLength, \
$CellContext`s2VarLength]]; UpSet[$CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s3Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s2VarLength, 
              BlankSequence[]]], 
           $CellContext`gamma[$CellContext`s3Ind, $CellContext`s2VarLength]]; 
         UpSet[$CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s3Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s2VarLength, 
              BlankSequence[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]], 
           $CellContext`gamma[$CellContext`s2VarLength, $CellContext`s3Ind]]; \
$CellContext`gamma[
            Pattern[$CellContext`s1Ind, 
             Blank[]], 
            Pattern[$CellContext`s2VarLength, 
             BlankSequence[]], 
            Pattern[$CellContext`s1Ind, 
             Blank[]]] = $CellContext`gammaTrace[$CellContext`s2VarLength]; 
         UpSet[$CellContext`spinorUbar[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]]], 
           $CellContext`gamma[
            $CellContext`spinorUbar[$CellContext`spinArg], \
$CellContext`s1VarLength]]; UpSet[$CellContext`spinorVbar[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]]], 
           $CellContext`gamma[
            $CellContext`spinorVbar[$CellContext`spinArg], \
$CellContext`s1VarLength]]; UpSet[$CellContext`spinorU[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]], 
           $CellContext`gamma[$CellContext`s1VarLength, 
            $CellContext`spinorU[$CellContext`spinArg]]]; 
         UpSet[$CellContext`spinorV[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`gamma[
             Pattern[$CellContext`s1VarLength, 
              BlankSequence[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]], 
           $CellContext`gamma[$CellContext`s1VarLength, 
            $CellContext`spinorV[$CellContext`spinArg]]]; 
         UpSet[$CellContext`spinorUbar[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s2Ind, 
              Blank[]]], 
           $CellContext`spinorUbar[$CellContext`spinArg, $CellContext`s2Ind]]; 
         UpSet[$CellContext`spinorVbar[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s2Ind, 
              Blank[]]], 
           $CellContext`spinorVbar[$CellContext`spinArg, $CellContext`s2Ind]]; 
         UpSet[$CellContext`spinorU[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s2Ind, 
              Blank[]]], 
           $CellContext`spinorU[$CellContext`spinArg, $CellContext`s2Ind]]; 
         UpSet[$CellContext`spinorV[
             Pattern[$CellContext`spinArg, 
              Blank[]], 
             Pattern[$CellContext`s1Ind, 
              Blank[]]] $CellContext`delta[
             Pattern[$CellContext`s1Ind, 
              Blank[]], 
             Pattern[$CellContext`s2Ind, 
              Blank[]]], 
           $CellContext`spinorV[$CellContext`spinArg, $CellContext`s2Ind]]; \
$CellContext`resultContracted = ReplaceRepeated[
            
            Expand[$CellContext`expr], $CellContext`addRules]; \
$CellContext`resultContracted = Expand[
            $CellContext`performTraces[$CellContext`resultContracted, \
$CellContext`tracesFile]]; $CellContext`resultContracted = 
          ReplaceRepeated[$CellContext`resultContracted, \
$CellContext`addRules]; 
         If[$CellContext`spinSums == 
           True, $CellContext`resultContracted = \
$CellContext`spinorSum[$CellContext`resultContracted]; \
$CellContext`resultContracted = Expand[
              $CellContext`performTraces[$CellContext`resultContracted, \
$CellContext`tracesFile]]; Null]; 
         If[$CellContext`simplSpinChain == 
           True, $CellContext`resultContracted = \
$CellContext`simplifySpinChains[$CellContext`resultContracted, \
$CellContext`addRules]; $CellContext`resultContracted = \
$CellContext`applyDiracEQ[$CellContext`resultContracted, \
$CellContext`addRules]; Null]; $CellContext`resultContracted]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {$CellContext`additionalRules -> {
       1 -> 1}, $CellContext`traceFileLocation -> 
      "/home/armin/my_programs/alphaLoopMisc/ltd_math_utils", \
$CellContext`spinChainSimplify -> False, $CellContext`polarizationSum -> 
      False}, "Attributes" -> {}, "FullName" -> "Global`contractLorentz"], 
   False]]], "Output",
 CellChangeTimes->{3.793554221451991*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"a46149e8-6f49-43d9-abaa-68239205faac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Minimal usage:", "Section",
 CellChangeTimes->{{3.793553343604179*^9, 
  3.793553352579281*^9}},ExpressionUUID->"c3a4e134-961f-48fd-8628-\
6f896df630b7"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
   RowBox[{"perform", " ", "color"}], "-", "contractions"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.793553215761034*^9, 
  3.793553226629354*^9}},ExpressionUUID->"9ae6e143-94ba-444c-92be-\
3275c1bb2ad3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testNum", "=", 
   RowBox[{"contractColor", "[", 
    RowBox[{
     RowBox[{"Import", "[", "\"\<./testFile.m\>\"", "]"}], ",", "i", ",", 
     "a"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7920566900327787`*^9, 3.7920567064048443`*^9}, {
   3.7920570009122753`*^9, 3.792057002501444*^9}, {3.792057123471056*^9, 
   3.792057137189036*^9}, {3.79205755810252*^9, 3.792057564121728*^9}, {
   3.792058157256185*^9, 3.792058173194643*^9}, {3.792058443113826*^9, 
   3.7920584466428003`*^9}, 3.792058491790532*^9, {3.792058552438938*^9, 
   3.792058552561846*^9}, {3.792058692627179*^9, 3.792058711868992*^9}, {
   3.792058870505661*^9, 3.792058881493929*^9}, {3.7920589889877872`*^9, 
   3.7920590165647373`*^9}, {3.7920593181731577`*^9, 
   3.7920593221907177`*^9}, {3.792059765807028*^9, 3.792059771935398*^9}, {
   3.792060577172154*^9, 3.792060578333832*^9}, {3.7920623805864773`*^9, 
   3.79206240682075*^9}, 3.7920625806180677`*^9, {3.792063513902833*^9, 
   3.7920635659740553`*^9}, {3.7920636209332857`*^9, 3.792063637869719*^9}, {
   3.792063775422312*^9, 3.7920637932885027`*^9}, {3.792063825708514*^9, 
   3.792063838959827*^9}, {3.792063913639673*^9, 3.7920639162581453`*^9}, {
   3.792065653987314*^9, 3.792065664565894*^9}, {3.792065747635646*^9, 
   3.7920657770601597`*^9}, {3.792065999311747*^9, 3.792066001109707*^9}, {
   3.792066099257081*^9, 3.7920661109172087`*^9}, {3.7920661428971252`*^9, 
   3.792066205842023*^9}, {3.7920666273208523`*^9, 3.7920666363701363`*^9}, 
   3.792066958713023*^9, {3.7920670581861486`*^9, 3.7920670826753397`*^9}, 
   3.792067162684019*^9, 3.792067405468416*^9, {3.792067464687501*^9, 
   3.792067466499278*^9}, {3.7920677923874207`*^9, 3.7920677943357573`*^9}, 
   3.79206789119518*^9, {3.792067979964513*^9, 3.792068000254984*^9}, {
   3.79206804606199*^9, 3.792068052973465*^9}, {3.7935198267087183`*^9, 
   3.793519854826818*^9}, 3.7935381383623667`*^9, {3.793539135956205*^9, 
   3.7935391645458508`*^9}, {3.7935397924045887`*^9, 3.793539807855949*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"a352a873-fc56-4f8d-a28e-9cdc1cf72244"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"gamma", "-", 
   RowBox[{
   "algebra", " ", "is", " ", "now", " ", "in", " ", "contract", " ", 
    "lorentz"}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7935532375994673`*^9, 
  3.793553259867296*^9}},ExpressionUUID->"b60df189-0e94-47f0-93c5-\
c3e1108d467a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", "\"\<before\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"testNum", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<after\>\"", "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"testNum", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7935412226352367`*^9, 3.793541228843483*^9}, {
  3.793541388511175*^9, 3.793541415308198*^9}, {3.7935422410925922`*^9, 
  3.7935422426896973`*^9}, {3.7935532665393467`*^9, 3.7935533016576357`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"8db1644e-308a-4cdf-bbd2-eaf1b1bcf387"],

Cell[BoxData["\<\"before\"\>"], "Print",
 CellChangeTimes->{{3.7935532898355618`*^9, 3.793553302299247*^9}},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"06271f87-57f1-404c-9725-45c02e405032"],

Cell[BoxData[
 FractionBox[
  RowBox[{
   SuperscriptBox["Mt", 
    RowBox[{"3", "/", "2"}]], " ", 
   RowBox[{"delta", "[", 
    RowBox[{"s3", ",", "s8"}], "]"}], " ", 
   RowBox[{"delta", "[", 
    RowBox[{"s5", ",", "s6"}], "]"}], " ", 
   RowBox[{"g", "[", 
    RowBox[{"mu1", ",", "mu2"}], "]"}], " ", 
   RowBox[{"g", "[", 
    RowBox[{"muM2", ",", "muM1"}], "]"}], " ", 
   RowBox[{"gamma", "[", 
    RowBox[{"s6", ",", "muM3", ",", "s3"}], "]"}], " ", 
   RowBox[{"gamma", "[", 
    RowBox[{"s8", ",", "mu2", ",", "s5"}], "]"}], " ", 
   RowBox[{"Ttr", "[", 
    RowBox[{
     RowBox[{"a", "[", 
      RowBox[{"-", "1"}], "]"}], ",", 
     RowBox[{"a", "[", 
      RowBox[{"-", "3"}], "]"}], ",", 
     RowBox[{"a", "[", 
      RowBox[{"-", "2"}], "]"}]}], "]"}], " ", 
   RowBox[{"vector", "[", 
    RowBox[{"p1", ",", "mu1"}], "]"}]}], 
  RowBox[{"2", " ", "s12"}]]], "Output",
 CellChangeTimes->{
  3.7935412298619843`*^9, {3.793541406424811*^9, 3.793541433551669*^9}, {
   3.793541471951775*^9, 3.793541491524805*^9}, 3.79354224375823*^9, 
   3.7935428216744127`*^9, 3.793542869808023*^9, 3.793544288064486*^9, 
   3.793544347791078*^9, 3.7935444395260563`*^9, 3.793550789204884*^9, 
   3.793551591944799*^9, {3.793553262864339*^9, 3.793553302302587*^9}},
 CellLabel->"Out[9]=",ExpressionUUID->"92d481c6-a1ed-48ae-95b3-64dbf2968fbd"],

Cell[BoxData["\<\"after\"\>"], "Print",
 CellChangeTimes->{{3.7935532898355618`*^9, 3.793553302305987*^9}},
 CellLabel->
  "During evaluation of \
In[8]:=",ExpressionUUID->"d31c0a77-2e03-403c-aa2f-c999b31959ef"],

Cell[BoxData[
 FractionBox[
  RowBox[{"2", " ", 
   SuperscriptBox["Mt", 
    RowBox[{"3", "/", "2"}]], " ", 
   RowBox[{"g", "[", 
    RowBox[{"muM1", ",", "muM2"}], "]"}], " ", 
   RowBox[{"Ttr", "[", 
    RowBox[{
     RowBox[{"a", "[", 
      RowBox[{"-", "1"}], "]"}], ",", 
     RowBox[{"a", "[", 
      RowBox[{"-", "3"}], "]"}], ",", 
     RowBox[{"a", "[", 
      RowBox[{"-", "2"}], "]"}]}], "]"}], " ", 
   RowBox[{"vector", "[", 
    RowBox[{"p1", ",", "muM3"}], "]"}]}], "s12"]], "Output",
 CellChangeTimes->{
  3.7935412298619843`*^9, {3.793541406424811*^9, 3.793541433551669*^9}, {
   3.793541471951775*^9, 3.793541491524805*^9}, 3.79354224375823*^9, 
   3.7935428216744127`*^9, 3.793542869808023*^9, 3.793544288064486*^9, 
   3.793544347791078*^9, 3.7935444395260563`*^9, 3.793550789204884*^9, 
   3.793551591944799*^9, {3.793553262864339*^9, 3.793553302914138*^9}},
 CellLabel->"Out[11]=",ExpressionUUID->"f0765c1f-6b78-45bf-b0fe-cfd0947c6bd9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simplifying spin chains", "Section",
 CellChangeTimes->{{3.7935533758765097`*^9, 
  3.7935533834263697`*^9}},ExpressionUUID->"92f0d8d1-3e29-4b06-9634-\
f00c2db0f067"],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "spin", " ", "chain", " ", "with", " ", "doubled", " ", "momenta", " ", 
   "and", " ", "doubled", " ", "Lorentz", " ", "indices"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.793549873369553*^9, 3.7935498838987503`*^9}, {
  3.793553400068605*^9, 
  3.79355343752141*^9}},ExpressionUUID->"7dda9615-0c0f-4d7e-ae17-\
dde6e4b7f1f6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"spinChain1", "=", 
   RowBox[{"gamma", "[", 
    RowBox[{"s1", ",", "mu", ",", 
     RowBox[{"lVec", "[", "p", "]"}], ",", "nu", ",", 
     RowBox[{"lVec", "[", "p", "]"}], ",", "s2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spinChain2", "=", 
   RowBox[{"gamma", "[", 
    RowBox[{"s1", ",", "mu", ",", 
     RowBox[{"lVec", "[", "p2", "]"}], ",", "mu", ",", 
     RowBox[{"lVec", "[", "p2", "]"}], ",", "s2"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spinChain3", "=", 
   RowBox[{
    RowBox[{"spinorUbar", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s1"}], "]"}], 
    RowBox[{"gamma", "[", 
     RowBox[{"s1", ",", "mu", ",", 
      RowBox[{"lVec", "[", "p1", "]"}], ",", "nu", ",", 
      RowBox[{"lVec", "[", "p2", "]"}], ",", "s2"}], "]"}], 
    RowBox[{"spinorU", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p2", ",", "mmq", ",", "pol"}], "}"}], ",", "s2"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.793553447784959*^9, 3.7935534858676863`*^9}, {
   3.793553632931693*^9, 3.7935536974143257`*^9}, 3.793553746784534*^9, {
   3.793553816313608*^9, 3.7935538833278522`*^9}, 3.793553968664207*^9},
 CellLabel->"In[91]:=",ExpressionUUID->"c42ff1d3-0508-40e7-bedc-88e4fec67f19"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", "\"\<Example 1: Doubled momenta\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Without spin-chain simplification\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", "spinChain1", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<With spin-chain simplification:\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"spinChain1", ",", 
   RowBox[{"spinChainSimplify", "\[Rule]", "True"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<------------------------------------------\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Example 2: Doubled momenta & doubled indices\>\"",
   "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Without spin-chain simplification\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", "spinChain2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<With spin-chain simplification:\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"spinChain2", ",", 
   RowBox[{"spinChainSimplify", "\[Rule]", "True"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<------------------------------------------\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Example 3: With spinors and Dirac EQ\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Without spin-chain simplification\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", "spinChain3", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<With spin-chain simplification:\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"spinChain3", ",", 
   RowBox[{"spinChainSimplify", "\[Rule]", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.793553518364059*^9, 3.793553642059717*^9}, {
   3.793553677499192*^9, 3.793553716049777*^9}, {3.793553762154393*^9, 
   3.793553810509409*^9}, {3.793553898290004*^9, 3.793553938567692*^9}, 
   3.793554339356514*^9},ExpressionUUID->"9a4516e7-8f59-4749-a074-\
1bf63568ef2b"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Example 1: Doubled momenta\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.79355397054665*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"6ba36d9c-4c85-4f9c-8a54-c4bb4a2c05ba"],

Cell[BoxData["\<\"Without spin-chain simplification\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553970549613*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"2425614b-f7e4-4eb8-860e-8893bc00da12"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"gamma", "[", 
  RowBox[{"s1", ",", "mu", ",", 
   RowBox[{"lVec", "[", "p", "]"}], ",", "nu", ",", 
   RowBox[{"lVec", "[", "p", "]"}], ",", "s2"}], "]"}]], "Output",
 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.793553971118395*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"f48a0a05-c5ae-4c43-a1be-52f7cba82fb4"],

Cell[BoxData["\<\"With spin-chain simplification:\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553971121551*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"f23a3a2f-5b6d-4ab2-9b6c-06778ae8d840"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", 
   RowBox[{"gamma", "[", 
    RowBox[{"s1", ",", "mu", ",", "nu", ",", "s2"}], "]"}]}], "-", 
  RowBox[{
   RowBox[{"gamma", "[", 
    RowBox[{"s1", ",", "mu", ",", "nu", ",", "s2"}], "]"}], " ", 
   RowBox[{"SP", "[", 
    RowBox[{"p", ",", "p"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.7935539735606623`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"24498f4a-f106-48cf-8ee4-d5b7abd52407"],

Cell[CellGroupData[{

Cell[BoxData["\<\"------------------------------------------\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553973563999*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"7ff43044-f7a2-4031-8efe-d42f09a1847b"],

Cell[BoxData["\<\"Example 2: Doubled momenta & doubled indices\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553973567177*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"a5f57b57-5498-4434-a339-357f55a5ed7f"],

Cell[BoxData["\<\"Without spin-chain simplification\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553973571767*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"2724e549-afd2-4b74-8ad0-60c89fe2e936"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"gamma", "[", 
  RowBox[{"s1", ",", "mu", ",", 
   RowBox[{"lVec", "[", "p2", "]"}], ",", "mu", ",", 
   RowBox[{"lVec", "[", "p2", "]"}], ",", "s2"}], "]"}]], "Output",
 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.793553974181819*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"444b937a-9ad7-4444-801d-eeec8cac4f5f"],

Cell[BoxData["\<\"With spin-chain simplification:\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553974185573*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"58c7eeed-f280-4def-afb9-f3f9cc83cd60"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", " ", 
   RowBox[{"delta", "[", 
    RowBox[{"s1", ",", "s2"}], "]"}], " ", 
   RowBox[{"SP", "[", 
    RowBox[{"p2", ",", "p2"}], "]"}]}], "-", 
  RowBox[{"d", " ", 
   RowBox[{"delta", "[", 
    RowBox[{"s1", ",", "s2"}], "]"}], " ", 
   RowBox[{"SP", "[", 
    RowBox[{"p2", ",", "p2"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.793553976603648*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"b57d61fa-1168-4a68-a163-c8845eb43c63"],

Cell[CellGroupData[{

Cell[BoxData["\<\"------------------------------------------\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.793553976607113*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"f7fdea7b-a27f-4c48-9293-de6d9eb37f41"],

Cell[BoxData["\<\"Example 3: With spinors and Dirac EQ\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.7935539766102943`*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"756b62c3-0a82-4952-b577-10ed933765be"],

Cell[BoxData["\<\"Without spin-chain simplification\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.7935539766156597`*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"490a94d8-f9b5-4b8b-b32c-f0f72cd638f5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"gamma", "[", 
  RowBox[{
   RowBox[{"spinorUbar", "[", 
    RowBox[{"{", 
     RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], "]"}], ",", "mu", ",", 
   RowBox[{"lVec", "[", "p1", "]"}], ",", "nu", ",", 
   RowBox[{"lVec", "[", "p2", "]"}], ",", 
   RowBox[{"spinorU", "[", 
    RowBox[{"{", 
     RowBox[{"p2", ",", "mmq", ",", "pol"}], "}"}], "]"}]}], "]"}]], "Output",\

 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.793553977220557*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"3f2ea449-2090-431b-bb27-9c86fde35637"],

Cell[BoxData["\<\"With spin-chain simplification:\"\>"], "Print",
 CellChangeTimes->{{3.7935535745398407`*^9, 3.793553646777895*^9}, 
   3.793553716933112*^9, 3.79355374877439*^9, 3.793553784264592*^9, 
   3.793553939123868*^9, 3.7935539772246647`*^9},
 CellLabel->
  "During evaluation of \
In[94]:=",ExpressionUUID->"9cce1344-cfb6-4c09-9208-47091e914163"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox["mmq", "2"]}], " ", 
   RowBox[{"gamma", "[", 
    RowBox[{
     RowBox[{"spinorUbar", "[", 
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], "]"}], ",", "mu", ",", 
     "nu", ",", 
     RowBox[{"spinorU", "[", 
      RowBox[{"{", 
       RowBox[{"p2", ",", "mmq", ",", "pol"}], "}"}], "]"}]}], "]"}]}], "+", 
  RowBox[{"2", " ", "mmq", " ", 
   RowBox[{"gamma", "[", 
    RowBox[{
     RowBox[{"spinorUbar", "[", 
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], "]"}], ",", "nu", ",", 
     RowBox[{"spinorU", "[", 
      RowBox[{"{", 
       RowBox[{"p2", ",", "mmq", ",", "pol"}], "}"}], "]"}]}], "]"}], " ", 
   RowBox[{"vector", "[", 
    RowBox[{"p1", ",", "mu"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.793553575144602*^9, 3.7935536473844748`*^9}, 
   3.793553717556281*^9, 3.7935537493532*^9, 3.7935537848828487`*^9, 
   3.793553939798123*^9, 3.7935539796291018`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"063879ee-b1eb-445d-a114-250f7db8bbb2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Applying polarization sums", "Section",
 CellChangeTimes->{{3.7935533758765097`*^9, 3.7935533834263697`*^9}, {
  3.793554056188012*^9, 
  3.793554069165593*^9}},ExpressionUUID->"fa4b9f6b-ac3c-449f-afdd-\
93be664b56c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"spinChain1", "=", 
   RowBox[{
    RowBox[{"spinorU", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s1"}], "]"}], 
    RowBox[{"spinorUbar", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s2"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spinChain2", "=", 
   RowBox[{
    RowBox[{"gamma", "[", 
     RowBox[{"s1", ",", "mu", ",", 
      RowBox[{"lVec", "[", "p2", "]"}], ",", "mu", ",", 
      RowBox[{"lVec", "[", "p2", "]"}], ",", "s2"}], "]"}], 
    RowBox[{"spinorU", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s2"}], "]"}], 
    RowBox[{"spinorUbar", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s1"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7935540886671143`*^9, 3.793554164897605*^9}, 
   3.79355431736749*^9, {3.793554439100546*^9, 3.7935544408901033`*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"075cc57d-2189-464b-beac-ac947b617e89"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Print", "[", "\"\<Example 1: Minimal polarization sum\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Without anything \>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", "spinChain1", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<With polarization sum:\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"spinChain1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"spinChainSimplify", "\[Rule]", "True"}], ",", 
     RowBox[{"polarizationSum", "\[Rule]", "True"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Example 2: Minimal polarization sum\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<Without anything \>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", "spinChain2", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", "\"\<With polarization sum:\>\"", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"contractLorentz", "[", 
  RowBox[{"spinChain2", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"spinChainSimplify", "\[Rule]", "True"}], ",", 
     RowBox[{"polarizationSum", "\[Rule]", "True"}]}], "}"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.7935540886671143`*^9, 3.793554209389715*^9}, {
  3.7935542445886307`*^9, 3.793554280711306*^9}, {3.793554357756374*^9, 
  3.793554391610811*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"aa9047ac-9aa6-4219-b350-0dc38baf9328"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Example 1: Minimal polarization sum\"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.793554443456585*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"f1d139ba-50cc-4e32-89d6-221b4c43baa1"],

Cell[BoxData["\<\"Without anything \"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.793554443458476*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"e03ff7ca-9f4d-44a9-b894-794591d156c7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"spinorU", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s1"}], "]"}], " ", 
  RowBox[{"spinorUbar", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], ",", "s2"}], 
   "]"}]}]], "Output",
 CellChangeTimes->{{3.793554254850503*^9, 3.793554290705221*^9}, 
   3.7935543928254633`*^9, 3.793554444172139*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"df324c72-7915-48bb-a542-3559e1a40d7a"],

Cell[BoxData["\<\"With polarization sum:\"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.793554444175685*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"c81b8727-acbe-4836-b35e-f312cb570e1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mmq", " ", 
   RowBox[{"delta", "[", 
    RowBox[{"s1", ",", "s2"}], "]"}]}], "+", 
  RowBox[{"gamma", "[", 
   RowBox[{"s1", ",", 
    RowBox[{"lVec", "[", "p1", "]"}], ",", "s2"}], "]"}]}]], "Output",
 CellChangeTimes->{{3.793554254850503*^9, 3.793554290705221*^9}, 
   3.7935543928254633`*^9, 3.7935544471643553`*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"cda5bd1f-155c-417c-b121-c86de74b0473"],

Cell[CellGroupData[{

Cell[BoxData["\<\"Example 2: Minimal polarization sum\"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.793554447166998*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"6a560f3a-d472-4375-a528-f99a3cb36566"],

Cell[BoxData["\<\"Without anything \"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.793554447169319*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"2447e318-80ad-4f55-aeea-998d57de6e0e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"gamma", "[", 
  RowBox[{
   RowBox[{"spinorUbar", "[", 
    RowBox[{"{", 
     RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], "]"}], ",", "mu", ",", 
   RowBox[{"lVec", "[", "p2", "]"}], ",", "mu", ",", 
   RowBox[{"lVec", "[", "p2", "]"}], ",", 
   RowBox[{"spinorU", "[", 
    RowBox[{"{", 
     RowBox[{"p1", ",", "mmq", ",", "pol"}], "}"}], "]"}]}], "]"}]], "Output",\

 CellChangeTimes->{{3.793554254850503*^9, 3.793554290705221*^9}, 
   3.7935543928254633`*^9, 3.7935544477767487`*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"8e28344f-5155-4a98-8f14-24d5e02185df"],

Cell[BoxData["\<\"With polarization sum:\"\>"], "Print",
 CellChangeTimes->{{3.793554254249264*^9, 3.793554290036188*^9}, 
   3.793554392204432*^9, 3.7935544477806997`*^9},
 CellLabel->
  "During evaluation of \
In[141]:=",ExpressionUUID->"bb8cded1-b8e1-4771-b45a-4e051373a726"],

Cell[BoxData[
 RowBox[{
  RowBox[{"8", " ", "mmq", " ", 
   RowBox[{"SP", "[", 
    RowBox[{"p2", ",", "p2"}], "]"}]}], "-", 
  RowBox[{"4", " ", "d", " ", "mmq", " ", 
   RowBox[{"SP", "[", 
    RowBox[{"p2", ",", "p2"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.793554254850503*^9, 3.793554290705221*^9}, 
   3.7935543928254633`*^9, 3.793554450778051*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"c8bb1ba2-99b6-4ad5-9a58-261a6fe37bb3"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7935540886671143`*^9, 3.793554209389715*^9}, {
   3.7935542445886307`*^9, 3.793554253046711*^9}, 
   3.793554354283498*^9},ExpressionUUID->"1903214c-c35f-49cf-842e-\
f4c608cb0b50"]
}, Open  ]]
},
WindowSize->{2560, 1376},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>1.3 Inherited,
FrontEndVersion->"12.0 for Linux x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 196, 3, 40, "Input",ExpressionUUID->"5c2b9ac4-3ae5-4ac0-bc75-84a12bdc7627"],
Cell[CellGroupData[{
Cell[779, 27, 273, 5, 40, "Input",ExpressionUUID->"1386c344-e425-45f3-adb1-986dc1a3e2c5"],
Cell[1055, 34, 1200, 17, 46, "Output",ExpressionUUID->"fa6e1322-1b70-4980-bad5-de1efa08c0a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2292, 56, 304, 5, 40, "Input",ExpressionUUID->"2eda4ad7-ab06-4023-b628-9918809ec85f"],
Cell[2599, 63, 1370, 20, 145, "Print",ExpressionUUID->"1d3e6a74-502e-4e4d-a940-ca89fb7928fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4006, 88, 209, 4, 40, "Input",ExpressionUUID->"b1ecf9d0-ad4f-498e-96fd-d1c36bbd396f"],
Cell[4218, 94, 49232, 1054, 1081, "Output",ExpressionUUID->"a46149e8-6f49-43d9-abaa-68239205faac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53487, 1153, 159, 3, 88, "Section",ExpressionUUID->"c3a4e134-961f-48fd-8628-6f896df630b7"],
Cell[53649, 1158, 258, 7, 40, "Input",ExpressionUUID->"9ae6e143-94ba-444c-92be-3275c1bb2ad3"],
Cell[53910, 1167, 2126, 32, 40, "Input",ExpressionUUID->"a352a873-fc56-4f8d-a28e-9cdc1cf72244"],
Cell[56039, 1201, 312, 8, 40, "Input",ExpressionUUID->"b60df189-0e94-47f0-93c5-c3e1108d467a"],
Cell[CellGroupData[{
Cell[56376, 1213, 702, 13, 128, "Input",ExpressionUUID->"8db1644e-308a-4cdf-bbd2-eaf1b1bcf387"],
Cell[57081, 1228, 212, 4, 32, "Print",ExpressionUUID->"06271f87-57f1-404c-9725-45c02e405032"],
Cell[57296, 1234, 1345, 34, 70, "Output",ExpressionUUID->"92d481c6-a1ed-48ae-95b3-64dbf2968fbd"],
Cell[58644, 1270, 211, 4, 32, "Print",ExpressionUUID->"d31c0a77-2e03-403c-aa2f-c999b31959ef"],
Cell[58858, 1276, 961, 23, 70, "Output",ExpressionUUID->"f0765c1f-6b78-45bf-b0fe-cfd0947c6bd9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59868, 1305, 172, 3, 88, "Section",ExpressionUUID->"92f0d8d1-3e29-4b06-9634-f00c2db0f067"],
Cell[60043, 1310, 382, 9, 40, "Input",ExpressionUUID->"7dda9615-0c0f-4d7e-ae17-dde6e4b7f1f6"],
Cell[60428, 1321, 1347, 34, 99, "Input",ExpressionUUID->"c42ff1d3-0508-40e7-bedc-88e4fec67f19"],
Cell[CellGroupData[{
Cell[61800, 1359, 2127, 41, 505, "Input",ExpressionUUID->"9a4516e7-8f59-4749-a074-1bf63568ef2b"],
Cell[CellGroupData[{
Cell[63952, 1404, 349, 6, 32, "Print",ExpressionUUID->"6ba36d9c-4c85-4f9c-8a54-c4bb4a2c05ba"],
Cell[64304, 1412, 357, 6, 32, "Print",ExpressionUUID->"2425614b-f7e4-4eb8-860e-8893bc00da12"]
}, Open  ]],
Cell[64676, 1421, 455, 8, 46, "Output",ExpressionUUID->"f48a0a05-c5ae-4c43-a1be-52f7cba82fb4"],
Cell[65134, 1431, 355, 6, 32, "Print",ExpressionUUID->"f23a3a2f-5b6d-4ab2-9b6c-06778ae8d840"],
Cell[65492, 1439, 582, 13, 46, "Output",ExpressionUUID->"24498f4a-f106-48cf-8ee4-d5b7abd52407"],
Cell[CellGroupData[{
Cell[66099, 1456, 366, 6, 32, "Print",ExpressionUUID->"7ff43044-f7a2-4031-8efe-d42f09a1847b"],
Cell[66468, 1464, 368, 6, 32, "Print",ExpressionUUID->"a5f57b57-5498-4434-a339-357f55a5ed7f"],
Cell[66839, 1472, 357, 6, 32, "Print",ExpressionUUID->"2724e549-afd2-4b74-8ad0-60c89fe2e936"]
}, Open  ]],
Cell[67211, 1481, 461, 9, 46, "Output",ExpressionUUID->"444b937a-9ad7-4444-801d-eeec8cac4f5f"],
Cell[67675, 1492, 355, 6, 32, "Print",ExpressionUUID->"58c7eeed-f280-4def-afb9-f3f9cc83cd60"],
Cell[68033, 1500, 619, 16, 46, "Output",ExpressionUUID->"b57d61fa-1168-4a68-a163-c8845eb43c63"],
Cell[CellGroupData[{
Cell[68677, 1520, 366, 6, 32, "Print",ExpressionUUID->"f7fdea7b-a27f-4c48-9293-de6d9eb37f41"],
Cell[69046, 1528, 362, 6, 32, "Print",ExpressionUUID->"756b62c3-0a82-4952-b577-10ed933765be"],
Cell[69411, 1536, 359, 6, 32, "Print",ExpressionUUID->"490a94d8-f9b5-4b8b-b32c-f0f72cd638f5"]
}, Open  ]],
Cell[69785, 1545, 666, 16, 46, "Output",ExpressionUUID->"3f2ea449-2090-431b-bb27-9c86fde35637"],
Cell[70454, 1563, 357, 6, 32, "Print",ExpressionUUID->"9cce1344-cfb6-4c09-9208-47091e914163"],
Cell[70814, 1571, 1086, 29, 46, "Output",ExpressionUUID->"063879ee-b1eb-445d-a114-250f7db8bbb2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[71949, 1606, 224, 4, 88, "Section",ExpressionUUID->"fa4b9f6b-ac3c-449f-afdd-93be664b56c6"],
Cell[72176, 1612, 1142, 32, 70, "Input",ExpressionUUID->"075cc57d-2189-464b-beac-ac947b617e89"],
Cell[CellGroupData[{
Cell[73343, 1648, 1476, 33, 302, "Input",ExpressionUUID->"aa9047ac-9aa6-4219-b350-0dc38baf9328"],
Cell[CellGroupData[{
Cell[74844, 1685, 289, 5, 32, "Print",ExpressionUUID->"f1d139ba-50cc-4e32-89d6-221b4c43baa1"],
Cell[75136, 1692, 271, 5, 32, "Print",ExpressionUUID->"e03ff7ca-9f4d-44a9-b894-794591d156c7"]
}, Open  ]],
Cell[75422, 1700, 506, 14, 46, "Output",ExpressionUUID->"df324c72-7915-48bb-a542-3559e1a40d7a"],
Cell[75931, 1716, 276, 5, 32, "Print",ExpressionUUID->"c81b8727-acbe-4836-b35e-f312cb570e1c"],
Cell[76210, 1723, 438, 11, 46, "Output",ExpressionUUID->"cda5bd1f-155c-417c-b121-c86de74b0473"],
Cell[CellGroupData[{
Cell[76673, 1738, 289, 5, 32, "Print",ExpressionUUID->"6a560f3a-d472-4375-a528-f99a3cb36566"],
Cell[76965, 1745, 271, 5, 32, "Print",ExpressionUUID->"2447e318-80ad-4f55-aeea-998d57de6e0e"]
}, Open  ]],
Cell[77251, 1753, 598, 15, 46, "Output",ExpressionUUID->"8e28344f-5155-4a98-8f14-24d5e02185df"],
Cell[77852, 1770, 278, 5, 32, "Print",ExpressionUUID->"bb8cded1-b8e1-4771-b45a-4e051373a726"],
Cell[78133, 1777, 443, 11, 79, "Output",ExpressionUUID->"c8bb1ba2-99b6-4ad5-9a58-261a6fe37bb3"]
}, Open  ]],
Cell[78591, 1791, 229, 4, 40, "Input",ExpressionUUID->"1903214c-c35f-49cf-842e-f4c608cb0b50"]
}, Open  ]]
}
]
*)

